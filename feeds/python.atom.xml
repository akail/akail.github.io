<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andrew Kail's Blog - Python</title><link href="https://blog.kail.io/" rel="alternate"></link><link href="https://blog.kail.io/feeds/python.atom.xml" rel="self"></link><id>https://blog.kail.io/</id><updated>2023-09-06T00:00:00-04:00</updated><subtitle>Somewhat HPC related blog</subtitle><entry><title>Simple Nvidia PyTorch Container</title><link href="https://blog.kail.io/simple-nvidia-pytorch-container.html" rel="alternate"></link><published>2023-09-06T00:00:00-04:00</published><updated>2023-09-06T00:00:00-04:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-09-06:/simple-nvidia-pytorch-container.html</id><summary type="html">&lt;p&gt;Another quick Apptainer example for getting pytorch quickly up and
running.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Definition File&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;Bootstrap&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;docker
&lt;span class="k"&gt;From&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;nvidia/cuda:&lt;span class="m"&gt;11.7.1&lt;/span&gt;-runtime-ubuntu22&lt;span class="m"&gt;.04&lt;/span&gt;

&lt;span class="gh"&gt;%post&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;update
&lt;span class="w"&gt;    &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;python3-pip
&lt;span class="w"&gt;    &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;torch&lt;span class="w"&gt; &lt;/span&gt;torchvision&lt;span class="w"&gt; &lt;/span&gt;torchaudio
&lt;span class="w"&gt;    &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ipykernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Build the Contaienr&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apptainer build pytorch.sif pytorch.def …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Another quick Apptainer example for getting pytorch quickly up and
running.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Definition File&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;Bootstrap&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;docker
&lt;span class="k"&gt;From&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;nvidia/cuda:&lt;span class="m"&gt;11.7.1&lt;/span&gt;-runtime-ubuntu22&lt;span class="m"&gt;.04&lt;/span&gt;

&lt;span class="gh"&gt;%post&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;update
&lt;span class="w"&gt;    &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;python3-pip
&lt;span class="w"&gt;    &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;torch&lt;span class="w"&gt; &lt;/span&gt;torchvision&lt;span class="w"&gt; &lt;/span&gt;torchaudio
&lt;span class="w"&gt;    &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ipykernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Build the Contaienr&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apptainer build pytorch.sif pytorch.def
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Passing &lt;code&gt;--nv&lt;/code&gt; tells apptainer to setup apptainer for running with the Nvidia GPU.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;apptainer&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;nv&lt;/span&gt; &lt;span class="n"&gt;pytorch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sif&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import torch; print(torch.cuda.is_available())&amp;quot;&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category><category term="apptainer"></category><category term="jupyter"></category><category term="nvidia"></category><category term="pytorch"></category></entry><entry><title>Running A Jupyter Kernel In Apptainer</title><link href="https://blog.kail.io/running-a-jupyter-kernel-in-apptainer.html" rel="alternate"></link><published>2023-08-30T00:00:00-04:00</published><updated>2023-08-30T00:00:00-04:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-08-30:/running-a-jupyter-kernel-in-apptainer.html</id><summary type="html">&lt;p&gt;Just a quick example of running a Jupyter kernel inside an &lt;del&gt;Singularity&lt;/del&gt; 
Apptainer container.&lt;/p&gt;
&lt;p&gt;First define a container with all the required applications, in particular &lt;code&gt;ipykernel&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;bootstrap&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;docker
&lt;span class="k"&gt;From&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;python:&lt;span class="m"&gt;3.11&lt;/span&gt;-slim-buster

&lt;span class="gh"&gt;%runscript&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello... I am a new Singularity container&amp;quot;&lt;/span&gt;

&lt;span class="gh"&gt;%labels&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;AUTHOR&lt;span class="w"&gt; &lt;/span&gt;andrew@kail.io

&lt;span class="gh"&gt;%post&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Just a quick example of running a Jupyter kernel inside an &lt;del&gt;Singularity&lt;/del&gt; 
Apptainer container.&lt;/p&gt;
&lt;p&gt;First define a container with all the required applications, in particular &lt;code&gt;ipykernel&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;bootstrap&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;docker
&lt;span class="k"&gt;From&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;python:&lt;span class="m"&gt;3.11&lt;/span&gt;-slim-buster

&lt;span class="gh"&gt;%runscript&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello... I am a new Singularity container&amp;quot;&lt;/span&gt;

&lt;span class="gh"&gt;%labels&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;AUTHOR&lt;span class="w"&gt; &lt;/span&gt;andrew@kail.io

&lt;span class="gh"&gt;%post&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;python-pip&lt;span class="w"&gt; &lt;/span&gt;python-dev&lt;span class="w"&gt; &lt;/span&gt;build-essential
&lt;span class="w"&gt;    &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--upgrade&lt;span class="w"&gt; &lt;/span&gt;pip
&lt;span class="w"&gt;    &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;numpy
&lt;span class="w"&gt;    &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;ipykernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Build the container image.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apptainer&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;ipykernel.sif&lt;span class="w"&gt; &lt;/span&gt;ipykernel.def
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, add the following to kernel specification under &lt;code&gt;/home/&amp;lt;user&amp;gt;/.local/share/jupyter/kernels/&amp;lt;kernelname&amp;gt;/kernel.json&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;argv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;singularity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--cleanenv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/akail/Projects/singularity/kernel/ipykernel.sif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipykernel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{connection_file}&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;singularity-kernel&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Restart Jupyter or Jupyter lab and you're all set.&lt;/p&gt;</content><category term="Python"></category><category term="apptainer"></category><category term="jupyter"></category></entry><entry><title>Hide Pelican Articles on Output</title><link href="https://blog.kail.io/hide-pelican-articles-on-output.html" rel="alternate"></link><published>2023-01-02T00:00:00-05:00</published><updated>2023-01-02T00:00:00-05:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-01-02:/hide-pelican-articles-on-output.html</id><summary type="html">&lt;p&gt;Authors: Andrew Kail&lt;/p&gt;
&lt;p&gt;While working on this website I had started to draft a lot of articles in preparation
to develop some consistency and start to flesh out a book on &lt;a href="https://hpc.kail.io"&gt;HPC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In doing so, I found that there was no way to prevent these articles from being generated and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Authors: Andrew Kail&lt;/p&gt;
&lt;p&gt;While working on this website I had started to draft a lot of articles in preparation
to develop some consistency and start to flesh out a book on &lt;a href="https://hpc.kail.io"&gt;HPC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In doing so, I found that there was no way to prevent these articles from being generated and could be
accessed by anyone digging through the site or my github repository.  While not a big deal since the drafts
themselves exist as markdown files, I wanted to keep the published website clean and began looking for a way
to clean things up.&lt;/p&gt;
&lt;p&gt;Pelican offers a few ways to control what gets generated on your website.  The first is by using the "Status" metadata
tag on an article or page.  The status can be draft, hidden, or published.  If an article is in draft, it will be listed under
the drafts directory of the web page.  If the article is hidden, it will be generated under the root directory as normal,
but will not have any links to it via tags or categories.  Published means the article is published.&lt;/p&gt;
&lt;p&gt;No matter which status we chose, the html for the article will be generated.&lt;/p&gt;
&lt;p&gt;There have been a few &lt;a href="https://github.com/getpelican/pelican/issues/1965"&gt;attempts&lt;/a&gt; at adding this feature, but
no one has stepped forward to implement it unfortunately.  From reading this issue the simplest solution is to leverage the &lt;code&gt;IGNORE_FILES&lt;/code&gt; setting
in &lt;code&gt;publishconf.py&lt;/code&gt; and move all drafts to a sub-folder in the &lt;code&gt;content&lt;/code&gt; directory. &lt;code&gt;IGNORE_FILES&lt;/code&gt; takes a list of regular
expressions one can use to exclude files and directories from generation.  For example, I created a directory &lt;code&gt;drafts&lt;/code&gt;
and moved all my draft files under there, and then kept my published files under a year based structure.  To exclude
files in the drafts folder and maintain the pelican defaults, the following should be added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;IGNORE_FILES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.#*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;drafts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now to ensure that all files under the drafts directory have the appropriate statue, we set &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt;
in &lt;code&gt;pelicanconf.py&lt;/code&gt; to set the default status.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;drafts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;draft&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will ensure drafts do not accidently populate the post list while developing and reduce the extra step of 
setting the status.&lt;/p&gt;</content><category term="Python"></category><category term="pelican"></category></entry></feed>