<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andrew Kail's Blog</title><link href="https://blog.kail.io/" rel="alternate"></link><link href="https://blog.kail.io/feeds/all.atom.xml" rel="self"></link><id>https://blog.kail.io/</id><updated>2023-03-29T01:00:00-04:00</updated><subtitle>Somewhat HPC related blog</subtitle><entry><title>Running Netboot.xyz From OPNSense</title><link href="https://blog.kail.io/running-netbootxyz-from-opnsense.html" rel="alternate"></link><published>2023-03-29T01:00:00-04:00</published><updated>2023-03-29T01:00:00-04:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-03-29:/running-netbootxyz-from-opnsense.html</id><summary type="html">&lt;p&gt;After working with some PXE booting at work recently, I decided to pick up a
long standing todo of installing netboot.xyz on my network.  When I started to
take a deeper look into it I realized I could probably install it on my OPNSense
VM as it is the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After working with some PXE booting at work recently, I decided to pick up a
long standing todo of installing netboot.xyz on my network.  When I started to
take a deeper look into it I realized I could probably install it on my OPNSense
VM as it is the DHCP server and comes with a TFTP plugin.&lt;/p&gt;
&lt;h2&gt;Install TFTP&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is install the TFTP plugin.  One note about this
plugin is that it is no longer maintained so there is a possibility it may go
away in the future.  Hopefully that is not the case.&lt;/p&gt;
&lt;p&gt;Navigate to &lt;code&gt;System &amp;gt; Firmware &amp;gt; Plugins&lt;/code&gt; and search for &lt;code&gt;os-tftp&lt;/code&gt;, then click
the &lt;code&gt;+&lt;/code&gt; button to install the plugin.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Install TFTP Plugin" src="https://blog.kail.io/images/2023/opnsense-pxe/opnsense-pxe-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Once we have the plugin installed we'll need to create the tftp directory and
install netboot before enabling the service.  Otherwise it will fail. This step
requires ssh access.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;opnsense&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Select &amp;#39;8&amp;#39; at the menu to enter the shell&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tftp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tftp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Download netboot files&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipxe&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kpxe&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipxe&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;efi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipxe&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;efi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I downloaded three files above to support the main types of network booting I
expect on my home network.  Namely Bios, EFI, and ARM EFI.  If you feel you need
to use a different bootloader you'll want to read the netboot documenation for
that.&lt;/p&gt;
&lt;p&gt;Now we can enable the service, making sure to set the "Listen Address" to the ip
we expect to boot from. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Enalbe TFTP" src="https://blog.kail.io/images/2023/opnsense-pxe/opnsense-pxe-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Click save and make sure the TFTP service has properly started.  You should see
a green play button in the top right indicating the service is running.&lt;/p&gt;
&lt;h2&gt;Configure DHCP&lt;/h2&gt;
&lt;p&gt;Now we need to enable the dhcp server to allow network booting.&lt;/p&gt;
&lt;p&gt;Navigate to &lt;code&gt;Services &amp;gt; DHCPv4 &amp;gt; [Name of you boot network]&lt;/code&gt;.  Making sure to
select the network you wish to boot from.  In my case, its my Internal network.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Configure Network Booting" src="https://blog.kail.io/images/2023/opnsense-pxe/opnsense-pxe-3.png" width="300"&gt;&lt;/p&gt;
&lt;p&gt;Scroll down till you see  &lt;code&gt;Network Booting&lt;/code&gt; and click the &lt;code&gt;Advanced&lt;/code&gt; button to
show all the full settings.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Advanced Settings" src="https://blog.kail.io/images/2023/opnsense-pxe/opnsense-pxe-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Fill out the form with the IP Address we configured for the TFTP service.  For
the filenames, you can do the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Filename&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bios&lt;/td&gt;
&lt;td&gt;netboot.xyz.kpxe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x86 UEFI (32-bit)&lt;/td&gt;
&lt;td&gt;netboot.xyz.efi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x86 UEFI (64-bit)&lt;/td&gt;
&lt;td&gt;netboot.xyz.efi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ARM x86 UEFI (32-bit)&lt;/td&gt;
&lt;td&gt;netboot.xyz-arm64.efi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ARM x86 UEFI (64-bit)&lt;/td&gt;
&lt;td&gt;netboot.xyz-arm64.efi&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt="Boot Filenames" src="https://blog.kail.io/images/2023/opnsense-pxe/opnsense-pxe-5.png"&gt;&lt;/p&gt;
&lt;p&gt;Scrool down to click save and the DHCP service should restart.  Now when you do
network booting with a system on the network it will bring up a slick menu to
boot your favorite distribution.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://netboot.xyz/docs/booting/tftp"&gt;Netboot.xyz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/OPNsenseFirewall/comments/zx86ve/how_to_configure_opnsense_for_netbootxyz/"&gt;Reddit
Thread&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="OPNSense"></category><category term="opnsense"></category><category term="netboot"></category></entry><entry><title>Adding Anaconda Environment to Jupyter</title><link href="https://blog.kail.io/adding-anaconda-environment-to-jupyter.html" rel="alternate"></link><published>2023-02-13T12:00:00-05:00</published><updated>2023-02-13T12:00:00-05:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-02-13:/adding-anaconda-environment-to-jupyter.html</id><summary type="html">&lt;p&gt;When using Jupyter, or Jupyterlab, you'll often times want to use different anaconda
environments for different projects.  Especially when you are working on a
personal workstation.  Unfortunately, even when installed with anaconda at the
root level, jupyter doesn't automatically detect installed anaconda
environments.&lt;/p&gt;
&lt;p&gt;For example, in a default jupyterhub install …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When using Jupyter, or Jupyterlab, you'll often times want to use different anaconda
environments for different projects.  Especially when you are working on a
personal workstation.  Unfortunately, even when installed with anaconda at the
root level, jupyter doesn't automatically detect installed anaconda
environments.&lt;/p&gt;
&lt;p&gt;For example, in a default jupyterhub install you will only have a single kernel
installed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Default Jupyterlab" src="https://blog.kail.io/images/2023/jupyter_kernelspecs/default_kernels.png"&gt;&lt;/p&gt;
&lt;h2&gt;Adding the Kernel&lt;/h2&gt;
&lt;p&gt;Start be creating a new anaconda environment, or optionally a python virtual
environment using one of the several available tools.&lt;/p&gt;
&lt;p&gt;At a minimum, the &lt;code&gt;ipykernel&lt;/code&gt; package must be installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# create and activate a new anaconda environment&lt;/span&gt;
conda create -n newkernel ipykernel
conda activate 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now add the kernel, being sure to add the &lt;code&gt;--user&lt;/code&gt; flag if anaconda is installed
somewhere the user does not have permission to write to.  Also, a name for the
kernel should also be provided as the default name may conflict with the default
kernel installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m ipykernel install --user --name newkernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now a new kernel should be available without having to restart the jupyter
instance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New Kernel" src="https://blog.kail.io/images/2023/jupyter_kernelspecs/kernel_installed.png"&gt;&lt;/p&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;When a kernel is installed, a json file is installed in the user's home
directory at &lt;code&gt;$HOME/.local/share/jupyter/kernels&lt;/code&gt;.  This json file defines where
jupyter will look to start kernel.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;argv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/akail/.conda/envs/newkernel/bin/python3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipykernel_launcher&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{connection_file}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;debugger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jupyter-client.readthedocs.io/en/latest/kernels.html#kernelspecs"&gt;Jupyter Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Jupyter"></category><category term="jupyter"></category><category term="python"></category></entry><entry><title>Cleaning Scratch Sub-directories</title><link href="https://blog.kail.io/cleaning-scratch-sub-directories.html" rel="alternate"></link><published>2023-01-09T00:00:00-05:00</published><updated>2023-01-09T00:00:00-05:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-01-09:/cleaning-scratch-sub-directories.html</id><summary type="html">&lt;p&gt;We recently ran into an issue with a high speed scratch file system after some drive failures.  While the metadata was intact we could not guarantee
that any of the user data was any good.  Since the metadata was good, we could keep the top level user scratch directories intact …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We recently ran into an issue with a high speed scratch file system after some drive failures.  While the metadata was intact we could not guarantee
that any of the user data was any good.  Since the metadata was good, we could keep the top level user scratch directories intact and remove all other files
under them, saving a bit of time recreating everything.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maxdepth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;mindepth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;rf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;{}&lt;span class="w"&gt; &lt;/span&gt;\&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet should be run with care.&lt;/p&gt;</content><category term="Snippet"></category><category term="storage"></category><category term="snippets"></category></entry><entry><title>Hide Pelican Articles on Output</title><link href="https://blog.kail.io/hide-pelican-articles-on-output.html" rel="alternate"></link><published>2023-01-02T00:00:00-05:00</published><updated>2023-01-02T00:00:00-05:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-01-02:/hide-pelican-articles-on-output.html</id><summary type="html">&lt;p&gt;Authors: Andrew Kail&lt;/p&gt;
&lt;p&gt;While working on this website I had started to draft a lot of articles in preparation
to develop some consistency and start to flesh out a book on &lt;a href="https://hpc.kail.io"&gt;HPC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In doing so, I found that there was no way to prevent these articles from being generated and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Authors: Andrew Kail&lt;/p&gt;
&lt;p&gt;While working on this website I had started to draft a lot of articles in preparation
to develop some consistency and start to flesh out a book on &lt;a href="https://hpc.kail.io"&gt;HPC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In doing so, I found that there was no way to prevent these articles from being generated and could be
accessed by anyone digging through the site or my github repository.  While not a big deal since the drafts
themselves exist as markdown files, I wanted to keep the published website clean and began looking for a way
to clean things up.&lt;/p&gt;
&lt;p&gt;Pelican offers a few ways to control what gets generated on your website.  The first is by using the "Status" metadata
tag on an article or page.  The status can be draft, hidden, or published.  If an article is in draft, it will be listed under
the drafts directory of the web page.  If the article is hidden, it will be generated under the root directory as normal,
but will not have any links to it via tags or categories.  Published means the article is published.&lt;/p&gt;
&lt;p&gt;No matter which status we chose, the html for the article will be generated.&lt;/p&gt;
&lt;p&gt;There have been a few &lt;a href="https://github.com/getpelican/pelican/issues/1965"&gt;attempts&lt;/a&gt; at adding this feature, but
no one has stepped forward to implement it unfortunately.  From reading this issue the simplest solution is to leverage the &lt;code&gt;IGNORE_FILES&lt;/code&gt; setting
in &lt;code&gt;publishconf.py&lt;/code&gt; and move all drafts to a sub-folder in the &lt;code&gt;content&lt;/code&gt; directory. &lt;code&gt;IGNORE_FILES&lt;/code&gt; takes a list of regular
expressions one can use to exclude files and directories from generation.  For example, I created a directory &lt;code&gt;drafts&lt;/code&gt;
and moved all my draft files under there, and then kept my published files under a year based structure.  To exclude
files in the drafts folder and maintain the pelican defaults, the following should be added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;IGNORE_FILES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.#*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;drafts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now to ensure that all files under the drafts directory have the appropriate statue, we set &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt;
in &lt;code&gt;pelicanconf.py&lt;/code&gt; to set the default status.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;drafts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;draft&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will ensure drafts do not accidently populate the post list while developing and reduce the extra step of 
setting the status.&lt;/p&gt;</content><category term="Python"></category><category term="pelican"></category></entry></feed>