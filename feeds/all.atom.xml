<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andrew Kail's Blog</title><link href="https://blog.kail.io/" rel="alternate"></link><link href="https://blog.kail.io/feeds/all.atom.xml" rel="self"></link><id>https://blog.kail.io/</id><updated>2023-06-27T12:00:00-04:00</updated><subtitle>Somewhat HPC related blog</subtitle><entry><title>The Impact of RHEL Changes on an HPC MSP</title><link href="https://blog.kail.io/the-impact-of-rhel-changes-on-an-hpc-msp.html" rel="alternate"></link><published>2023-06-27T12:00:00-04:00</published><updated>2023-06-27T12:00:00-04:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-06-27:/the-impact-of-rhel-changes-on-an-hpc-msp.html</id><summary type="html">&lt;p&gt;Its been nearly a week now and after having stewed on it I think its time tp speak my piece on this debacle.&lt;/p&gt;
&lt;p&gt;The recent changes to how Red Hat Enterprise Linux (RHEL) distributes their
source code has caused quite a stir in the Linux and HPC community.  &lt;/p&gt;
&lt;p&gt;While I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Its been nearly a week now and after having stewed on it I think its time tp speak my piece on this debacle.&lt;/p&gt;
&lt;p&gt;The recent changes to how Red Hat Enterprise Linux (RHEL) distributes their
source code has caused quite a stir in the Linux and HPC community.  &lt;/p&gt;
&lt;p&gt;While I can't fault RedHat/IBM for the business decision they have made, it does
leave us in a bit of a pickle with regard to the support we provide long term.&lt;/p&gt;
&lt;h2&gt;What Happened&lt;/h2&gt;
&lt;p&gt;This feels like beating a dead horse really, so I'll just leave a few links on the situation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.redhat.com/en/blog/furthering-evolution-centos-stream"&gt;The initial announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.redhat.com/en/blog/red-hats-commitment-open-source-response-gitcentosorg-changes"&gt;The RedHat response to Cricism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rocky Linux &lt;a href="https://rockylinux.org/news/2023-06-22-press-release/"&gt;1&lt;/a&gt; &lt;a href="https://rockylinux.org/news/brave-new-world-path-forward/"&gt;2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://almalinux.org/blog/impact-of-rhel-changes/"&gt;Alma Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sfconservancy.org/blog/2023/jun/23/rhel-gpl-analysis/"&gt;Software Freedom Conservancy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jeff Geerling &lt;a href="https://www.jeffgeerling.com/blog/2023/dear-red-hat-are-you-dumb"&gt;1&lt;/a&gt; &lt;a href="https://www.jeffgeerling.com/blog/2023/removing-official-support-red-hat-enterprise-linux"&gt;2&lt;/a&gt; &lt;a href="https://www.jeffgeerling.com/blog/2023/im-done-red-hat-enterprise-linux"&gt;3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;tldr&lt;/strong&gt; - RedHad sees no value in allowing rebuilds, so they're closing it off.&lt;/p&gt;
&lt;h2&gt;How This Impacts Us&lt;/h2&gt;
&lt;p&gt;At the moment it doesn't thanks to the engineering teams at CIQ stepping up to provide continued updates which we are extremelly grateful for.  We are currently in the process of migrating customers from CentOS 7 clusters to Rocky 8 or 9 depending on the environment, with plans to migrate several more over the course of the year. This, of course, excludes the several we have that are running RHEL which will not be impacted at all by the change.&lt;/p&gt;
&lt;p&gt;The big question is how long can CIQ keep these updates going? Or how long can Alma maintain cherry picking updates out of CentOS Stream? Once RedHat realizes they didn't kill off the derivative rebuilds will they pursue other legal or more drastic actions?  Going a step further, what about other open source projects from RedHat?  Looking at you Ansible, Podman, etc.&lt;/p&gt;
&lt;p&gt;And what will IBM be doing for their products running on RHEL and OpenShift?  I'm worried about IBM Storage Scale (GPFS) only support clients on RHEL.&lt;/p&gt;
&lt;p&gt;The bigger blow for our engineering or is Jeff Geerling dropping support for Enterprise Linux with his ansible roles,
which are used heavily for some of our deployments.  Who will follow in dropping support?  We've already seen some application developers, namely GROMACS, state they will only officially support container stacks.&lt;/p&gt;
&lt;p&gt;Then, for so many of our clients, they can't absorb the licensing costs for the number of licenses they need.  Many are smaller clients on a budget and a huge increase in license costs will reduce the value they can provide to their users.  &lt;/p&gt;
&lt;h2&gt;What next&lt;/h2&gt;
&lt;p&gt;We honestly don't know what the future holds for us in our space.  Most of our clients are on CentOS, Rocky, or RHEL spanning multiple versions.  Most of our storage stack are supported only on Enterprise Linux or heavily favor it.  If Rocky or Alma eventually go away we'll have to make some decisions on those clients.&lt;/p&gt;
&lt;p&gt;In the meantime, we'll be prioritizing containerization of user applications via Singularity, Shifter, or CharlieCloud (Upcoming Article on this), as well as experiment with containerization of our supporting infrastructure.  While some pieces like the majority of the monitoring stack are easy to containerize, I am even looking at moving tools like Warewulf to a container which should be interesting.&lt;/p&gt;
&lt;p&gt;Our other option is to migrate some of our customer base to OpenSuse Leap and offer paid support if they need it. Leap is the CentOS/Rocky equiavalent of Suse Enterprise Linux (SLES) and is maintained directly by Suse.  We've met with their team in the past and have dedicated resources and packages for HPC environments.  I think this is their opportunity to step into the HPC space for many institutions and I really hope they don't miss it.  I'll be exploring openSuseLeap and warewulf in the coming weeks with some blog posts I hope.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This announcement hit me right before bed unfortunately what followed was not a good night's sleep as I wrestled with the implications.&lt;/p&gt;
&lt;p&gt;We'll be fine for now and we have some work to do to support our customers in the long term. &lt;/p&gt;
&lt;p&gt;Also, what they have done doesn't appear to be illegal nor violate the GPL license. Time will tell, but I'm starting to see some bleedover of Big Blue into RedHat more and more and have deep concerns about how we can support our clients long term. I hope I'm wrong.&lt;/p&gt;</content><category term="HPC"></category><category term="hpc"></category><category term="linux"></category></entry><entry><title>PXE Booting on Proxmox</title><link href="https://blog.kail.io/pxe-booting-on-proxmox.html" rel="alternate"></link><published>2023-04-05T01:00:00-04:00</published><updated>2023-04-05T01:00:00-04:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-04-05:/pxe-booting-on-proxmox.html</id><summary type="html">&lt;p&gt;In last's week post I &lt;a href="https://blog.kail.io/running-netbootxyz-from-opnsense.html"&gt;installed netboot.xyz on an OPNSense firewall&lt;/a&gt;. Now its
time to test the PXE boot process on a VM on my Proxmox Host.  Its very
straightforward, but there are a few caveats I found with netboot.&lt;/p&gt;
&lt;p&gt;First, start the VM Creation process in Proxmox.  You …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In last's week post I &lt;a href="https://blog.kail.io/running-netbootxyz-from-opnsense.html"&gt;installed netboot.xyz on an OPNSense firewall&lt;/a&gt;. Now its
time to test the PXE boot process on a VM on my Proxmox Host.  Its very
straightforward, but there are a few caveats I found with netboot.&lt;/p&gt;
&lt;p&gt;First, start the VM Creation process in Proxmox.  You will use the defaults on
most of the pages, but there are two important menu's you'll need to fill out.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create VM" src="https://blog.kail.io/images/2023/proxmox-pxe/proxmox-pxe-1.png"&gt;&lt;/p&gt;
&lt;p&gt;The first is in the OS menu.  Instead of selecting an ISO which has been loaded
to the node, you'll want to select &lt;code&gt;Do no use any media&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Select Install Media" src="https://blog.kail.io/images/2023/proxmox-pxe/proxmox-pxe-2.png"&gt;&lt;/p&gt;
&lt;p&gt;The second caveat is when configuring the RAM.  During testing, I found there is
a minimum amount of RAM you need with PXE booting.  This is due to downloaded
media having to be stored in RAM before starting. Usually happens when running a
live OS like EndeavourOS.  You'll want to configure at least 4 Gigabytes of RAM.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Select Ram" src="https://blog.kail.io/images/2023/proxmox-pxe/proxmox-pxe-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Finish creating the VM and go to the VM's console menu to start the VM.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Start VM" src="https://blog.kail.io/images/2023/proxmox-pxe/proxmox-pxe-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Without any media configured and nothing installed to the virtual disk the VM
will automatically network boot and should pick up netboot.xyz right away.
You'll the be able to select from the menu what you want to boot.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Netboot" src="https://blog.kail.io/images/2023/proxmox-pxe/proxmox-pxe-5.png"&gt;&lt;/p&gt;
&lt;p&gt;I'm really impressed with how easy netboot.xyz was to install and use and I look
forward to using it.&lt;/p&gt;</content><category term="Proxmox"></category><category term="proxmox"></category><category term="netboot"></category></entry><entry><title>Running Netboot.xyz From OPNSense</title><link href="https://blog.kail.io/running-netbootxyz-from-opnsense.html" rel="alternate"></link><published>2023-03-29T01:00:00-04:00</published><updated>2023-03-29T01:00:00-04:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-03-29:/running-netbootxyz-from-opnsense.html</id><summary type="html">&lt;p&gt;After working with some PXE booting at work recently, I decided to pick up a
long standing todo of installing netboot.xyz on my network.  When I started to
take a deeper look into it I realized I could probably install it on my OPNSense
VM as it is the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After working with some PXE booting at work recently, I decided to pick up a
long standing todo of installing netboot.xyz on my network.  When I started to
take a deeper look into it I realized I could probably install it on my OPNSense
VM as it is the DHCP server and comes with a TFTP plugin.&lt;/p&gt;
&lt;h2&gt;Install TFTP&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is install the TFTP plugin.  One note about this
plugin is that it is no longer maintained so there is a possibility it may go
away in the future.  Hopefully that is not the case.&lt;/p&gt;
&lt;p&gt;Navigate to &lt;code&gt;System &amp;gt; Firmware &amp;gt; Plugins&lt;/code&gt; and search for &lt;code&gt;os-tftp&lt;/code&gt;, then click
the &lt;code&gt;+&lt;/code&gt; button to install the plugin.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Install TFTP Plugin" src="https://blog.kail.io/images/2023/opnsense-pxe/opnsense-pxe-1.png"&gt;&lt;/p&gt;
&lt;p&gt;Once we have the plugin installed we'll need to create the tftp directory and
install netboot before enabling the service.  Otherwise it will fail. This step
requires ssh access.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;opnsense&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Select &amp;#39;8&amp;#39; at the menu to enter the shell&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tftp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tftp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# Download netboot files&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipxe&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kpxe&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipxe&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;efi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipxe&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;netboot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;efi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I downloaded three files above to support the main types of network booting I
expect on my home network.  Namely Bios, EFI, and ARM EFI.  If you feel you need
to use a different bootloader you'll want to read the netboot documenation for
that.&lt;/p&gt;
&lt;p&gt;Now we can enable the service, making sure to set the "Listen Address" to the ip
we expect to boot from. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Enalbe TFTP" src="https://blog.kail.io/images/2023/opnsense-pxe/opnsense-pxe-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Click save and make sure the TFTP service has properly started.  You should see
a green play button in the top right indicating the service is running.&lt;/p&gt;
&lt;h2&gt;Configure DHCP&lt;/h2&gt;
&lt;p&gt;Now we need to enable the dhcp server to allow network booting.&lt;/p&gt;
&lt;p&gt;Navigate to &lt;code&gt;Services &amp;gt; DHCPv4 &amp;gt; [Name of you boot network]&lt;/code&gt;.  Making sure to
select the network you wish to boot from.  In my case, its my Internal network.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Configure Network Booting" class="center-img" src="https://blog.kail.io/images/2023/opnsense-pxe/opnsense-pxe-3.png" width="300"&gt;&lt;/p&gt;
&lt;p&gt;Scroll down till you see  &lt;code&gt;Network Booting&lt;/code&gt; and click the &lt;code&gt;Advanced&lt;/code&gt; button to
show all the full settings.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Advanced Settings" src="https://blog.kail.io/images/2023/opnsense-pxe/opnsense-pxe-4.png"&gt;&lt;/p&gt;
&lt;p&gt;Fill out the form with the IP Address we configured for the TFTP service.  For
the filenames, you can do the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Filename&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bios&lt;/td&gt;
&lt;td&gt;netboot.xyz.kpxe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x86 UEFI (32-bit)&lt;/td&gt;
&lt;td&gt;netboot.xyz.efi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x86 UEFI (64-bit)&lt;/td&gt;
&lt;td&gt;netboot.xyz.efi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ARM x86 UEFI (32-bit)&lt;/td&gt;
&lt;td&gt;netboot.xyz-arm64.efi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ARM x86 UEFI (64-bit)&lt;/td&gt;
&lt;td&gt;netboot.xyz-arm64.efi&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt="Boot Filenames" src="https://blog.kail.io/images/2023/opnsense-pxe/opnsense-pxe-5.png"&gt;&lt;/p&gt;
&lt;p&gt;Scrool down to click save and the DHCP service should restart.  Now when you do
network booting with a system on the network it will bring up a slick menu to
boot your favorite distribution.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://netboot.xyz/docs/booting/tftp"&gt;Netboot.xyz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/OPNsenseFirewall/comments/zx86ve/how_to_configure_opnsense_for_netbootxyz/"&gt;Reddit
Thread&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="OPNSense"></category><category term="opnsense"></category><category term="netboot"></category></entry><entry><title>Adding Anaconda Environment to Jupyter</title><link href="https://blog.kail.io/adding-anaconda-environment-to-jupyter.html" rel="alternate"></link><published>2023-02-13T12:00:00-05:00</published><updated>2023-02-13T12:00:00-05:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-02-13:/adding-anaconda-environment-to-jupyter.html</id><summary type="html">&lt;p&gt;When using Jupyter, or Jupyterlab, you'll often times want to use different anaconda
environments for different projects.  Especially when you are working on a
personal workstation.  Unfortunately, even when installed with anaconda at the
root level, jupyter doesn't automatically detect installed anaconda
environments.&lt;/p&gt;
&lt;p&gt;For example, in a default jupyterhub install …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When using Jupyter, or Jupyterlab, you'll often times want to use different anaconda
environments for different projects.  Especially when you are working on a
personal workstation.  Unfortunately, even when installed with anaconda at the
root level, jupyter doesn't automatically detect installed anaconda
environments.&lt;/p&gt;
&lt;p&gt;For example, in a default jupyterhub install you will only have a single kernel
installed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Default Jupyterlab" src="https://blog.kail.io/images/2023/jupyter_kernelspecs/default_kernels.png"&gt;&lt;/p&gt;
&lt;h2&gt;Adding the Kernel&lt;/h2&gt;
&lt;p&gt;Start be creating a new anaconda environment, or optionally a python virtual
environment using one of the several available tools.&lt;/p&gt;
&lt;p&gt;At a minimum, the &lt;code&gt;ipykernel&lt;/code&gt; package must be installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# create and activate a new anaconda environment&lt;/span&gt;
conda create -n newkernel ipykernel
conda activate 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now add the kernel, being sure to add the &lt;code&gt;--user&lt;/code&gt; flag if anaconda is installed
somewhere the user does not have permission to write to.  Also, a name for the
kernel should also be provided as the default name may conflict with the default
kernel installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m ipykernel install --user --name newkernel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now a new kernel should be available without having to restart the jupyter
instance.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New Kernel" src="https://blog.kail.io/images/2023/jupyter_kernelspecs/kernel_installed.png"&gt;&lt;/p&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;When a kernel is installed, a json file is installed in the user's home
directory at &lt;code&gt;$HOME/.local/share/jupyter/kernels&lt;/code&gt;.  This json file defines where
jupyter will look to start kernel.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;argv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/home/akail/.conda/envs/newkernel/bin/python3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ipykernel_launcher&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{connection_file}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;display_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;debugger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jupyter-client.readthedocs.io/en/latest/kernels.html#kernelspecs"&gt;Jupyter Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Jupyter"></category><category term="jupyter"></category><category term="python"></category></entry><entry><title>Cleaning Scratch Sub-directories</title><link href="https://blog.kail.io/cleaning-scratch-sub-directories.html" rel="alternate"></link><published>2023-01-09T00:00:00-05:00</published><updated>2023-01-09T00:00:00-05:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-01-09:/cleaning-scratch-sub-directories.html</id><summary type="html">&lt;p&gt;We recently ran into an issue with a high speed scratch file system after some drive failures.  While the metadata was intact we could not guarantee
that any of the user data was any good.  Since the metadata was good, we could keep the top level user scratch directories intact …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We recently ran into an issue with a high speed scratch file system after some drive failures.  While the metadata was intact we could not guarantee
that any of the user data was any good.  Since the metadata was good, we could keep the top level user scratch directories intact and remove all other files
under them, saving a bit of time recreating everything.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;maxdepth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;mindepth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;rm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;rf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;{}&lt;span class="w"&gt; &lt;/span&gt;\&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet should be run with care.&lt;/p&gt;</content><category term="Snippet"></category><category term="storage"></category><category term="snippets"></category></entry><entry><title>Hide Pelican Articles on Output</title><link href="https://blog.kail.io/hide-pelican-articles-on-output.html" rel="alternate"></link><published>2023-01-02T00:00:00-05:00</published><updated>2023-01-02T00:00:00-05:00</updated><author><name>Andrew Kail</name></author><id>tag:blog.kail.io,2023-01-02:/hide-pelican-articles-on-output.html</id><summary type="html">&lt;p&gt;Authors: Andrew Kail&lt;/p&gt;
&lt;p&gt;While working on this website I had started to draft a lot of articles in preparation
to develop some consistency and start to flesh out a book on &lt;a href="https://hpc.kail.io"&gt;HPC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In doing so, I found that there was no way to prevent these articles from being generated and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Authors: Andrew Kail&lt;/p&gt;
&lt;p&gt;While working on this website I had started to draft a lot of articles in preparation
to develop some consistency and start to flesh out a book on &lt;a href="https://hpc.kail.io"&gt;HPC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In doing so, I found that there was no way to prevent these articles from being generated and could be
accessed by anyone digging through the site or my github repository.  While not a big deal since the drafts
themselves exist as markdown files, I wanted to keep the published website clean and began looking for a way
to clean things up.&lt;/p&gt;
&lt;p&gt;Pelican offers a few ways to control what gets generated on your website.  The first is by using the "Status" metadata
tag on an article or page.  The status can be draft, hidden, or published.  If an article is in draft, it will be listed under
the drafts directory of the web page.  If the article is hidden, it will be generated under the root directory as normal,
but will not have any links to it via tags or categories.  Published means the article is published.&lt;/p&gt;
&lt;p&gt;No matter which status we chose, the html for the article will be generated.&lt;/p&gt;
&lt;p&gt;There have been a few &lt;a href="https://github.com/getpelican/pelican/issues/1965"&gt;attempts&lt;/a&gt; at adding this feature, but
no one has stepped forward to implement it unfortunately.  From reading this issue the simplest solution is to leverage the &lt;code&gt;IGNORE_FILES&lt;/code&gt; setting
in &lt;code&gt;publishconf.py&lt;/code&gt; and move all drafts to a sub-folder in the &lt;code&gt;content&lt;/code&gt; directory. &lt;code&gt;IGNORE_FILES&lt;/code&gt; takes a list of regular
expressions one can use to exclude files and directories from generation.  For example, I created a directory &lt;code&gt;drafts&lt;/code&gt;
and moved all my draft files under there, and then kept my published files under a year based structure.  To exclude
files in the drafts folder and maintain the pelican defaults, the following should be added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;IGNORE_FILES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.#*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;drafts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now to ensure that all files under the drafts directory have the appropriate statue, we set &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt;
in &lt;code&gt;pelicanconf.py&lt;/code&gt; to set the default status.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;drafts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;draft&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will ensure drafts do not accidently populate the post list while developing and reduce the extra step of 
setting the status.&lt;/p&gt;</content><category term="Python"></category><category term="pelican"></category></entry></feed>